[null,null,{"jobId":"CI-Pipeline.yml_406","stageName":"eslint","status":"Failed","stdout":[{"filePath":"/tmp/CI-Pipeline.yml_406/index.js","messages":[{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":1,"column":25,"nodeType":"VariableDeclaration","source":"var v1 = require('./v1');","fix":{"range":[24,25],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":2,"column":25,"nodeType":"VariableDeclaration","source":"var v4 = require('./v4');","fix":{"range":[50,51],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":4,"column":14,"nodeType":"VariableDeclaration","source":"var uuid = v4;","fix":{"range":[66,67],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":5,"column":13,"nodeType":"ExpressionStatement","source":"uuid.v1 = v1;","fix":{"range":[80,81],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":6,"column":13,"nodeType":"ExpressionStatement","source":"uuid.v4 = v4;","fix":{"range":[94,95],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":8,"column":22,"nodeType":"ExpressionStatement","source":"module.exports = uuid;","fix":{"range":[118,119],"text":""}}],"errorCount":6,"warningCount":0,"source":"var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n"},{"filePath":"/tmp/CI-Pipeline.yml_406/lib/bytesToUuid.js","messages":[{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":5,"column":19,"nodeType":"VariableDeclaration","source":"var byteToHex = [];","fix":{"range":[141,142],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":7,"column":52,"nodeType":"ExpressionStatement","source":"  byteToHex[i] = (i + 0x100).toString(16).substr(1);","fix":{"range":[226,227],"text":""}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":10,"column":21,"nodeType":"FunctionDeclaration","source":"function bytesToUuid(buf, offset) {","fix":{"range":[251,251],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":11,"column":22,"nodeType":"VariableDeclaration","source":"  var i = offset || 0;","fix":{"range":[288,289],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":12,"column":22,"nodeType":"VariableDeclaration","source":"  var bth = byteToHex;","fix":{"range":[311,312],"text":""}},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before 'bth'.","line":13,"column":11,"nodeType":"Identifier","source":"  return  bth[buf[i++]] + bth[buf[i++]] +","fix":{"range":[321,323],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":20,"column":40,"nodeType":"ReturnStatement","source":"          bth[buf[i++]] + bth[buf[i++]];","fix":{"range":[670,671],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":23,"column":29,"nodeType":"ExpressionStatement","source":"module.exports = bytesToUuid;","fix":{"range":[703,704],"text":""}}],"errorCount":8,"warningCount":0,"source":"/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n"},{"filePath":"/tmp/CI-Pipeline.yml_406/lib/rng-browser.js","messages":[{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":5,"column":8,"nodeType":"VariableDeclaration","source":"var rng;","fix":{"range":[259,260],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":7,"column":46,"nodeType":"VariableDeclaration","source":"var crypto = global.crypto || global.msCrypto; // for IE 11","fix":{"range":[307,308],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":10,"column":33,"nodeType":"VariableDeclaration","source":"  var rnds8 = new Uint8Array(16);","fix":{"range":[454,455],"text":""}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":11,"column":27,"nodeType":"FunctionExpression","source":"  rng = function whatwgRNG() {","fix":{"range":[482,482],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":12,"column":34,"nodeType":"ExpressionStatement","source":"    crypto.getRandomValues(rnds8);","fix":{"range":[520,521],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":13,"column":17,"nodeType":"ReturnStatement","source":"    return rnds8;","fix":{"range":[538,539],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":14,"column":4,"nodeType":"ExpressionStatement","source":"  };","fix":{"range":[543,544],"text":""}},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before 'rnds'.","line":22,"column":8,"nodeType":"Identifier","source":"  var  rnds = new Array(16);","fix":{"range":[692,694],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":22,"column":28,"nodeType":"VariableDeclaration","source":"  var  rnds = new Array(16);","fix":{"range":[714,715],"text":""}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":23,"column":17,"nodeType":"FunctionExpression","source":"  rng = function() {","fix":{"range":[732,732],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":25,"column":60,"nodeType":"ExpressionStatement","source":"      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;","fix":{"range":[834,835],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":26,"column":47,"nodeType":"ExpressionStatement","source":"      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;","fix":{"range":[882,883],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":29,"column":16,"nodeType":"ReturnStatement","source":"    return rnds;","fix":{"range":[906,907],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":30,"column":4,"nodeType":"ExpressionStatement","source":"  };","fix":{"range":[911,912],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":33,"column":21,"nodeType":"ExpressionStatement","source":"module.exports = rng;","fix":{"range":[936,937],"text":""}}],"errorCount":15,"warningCount":0,"source":"// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n"},{"filePath":"/tmp/CI-Pipeline.yml_406/lib/rng.js","messages":[{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":4,"column":39,"nodeType":"VariableDeclaration","source":"var rb = require('crypto').randomBytes;","fix":{"range":[176,177],"text":""}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":6,"column":13,"nodeType":"FunctionDeclaration","source":"function rng() {","fix":{"range":[191,191],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":7,"column":16,"nodeType":"ReturnStatement","source":"  return rb(16);","fix":{"range":[211,212],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":10,"column":21,"nodeType":"ExpressionStatement","source":"module.exports = rng;","fix":{"range":[237,238],"text":""}}],"errorCount":4,"warningCount":0,"source":"// Unique ID creation requires a high quality random # generator.  In node.js\n// this is prett straight-forward - we use the crypto API.\n\nvar rb = require('crypto').randomBytes;\n\nfunction rng() {\n  return rb(16);\n};\n\nmodule.exports = rng;\n"},{"filePath":"/tmp/CI-Pipeline.yml_406/test/test.js","messages":[{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":1,"column":31,"nodeType":"VariableDeclaration","source":"var assert = require('assert');","fix":{"range":[30,31],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":3,"column":26,"nodeType":"VariableDeclaration","source":"var uuid = require('../');","fix":{"range":[58,59],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":6,"column":25,"nodeType":"VariableDeclaration","source":"var TIME = 1321644961388; // 2011-11-18 11:36:01.388-08:00","fix":{"range":[142,143],"text":""}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":8,"column":17,"nodeType":"FunctionDeclaration","source":"function compare(name, ids) {","fix":{"range":[194,194],"text":" "}},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":9,"column":3,"nodeType":"Identifier","source":"  test(name, function() {"},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":9,"column":22,"nodeType":"FunctionExpression","source":"  test(name, function() {","fix":{"range":[229,229],"text":" "}},{"ruleId":"space-infix-ops","severity":2,"message":"Infix operators must be spaced.","line":11,"column":15,"nodeType":"VariableDeclarator","source":"    for (var i=0 ; i<ids.length ; ++i) {","fix":{"range":[285,286],"text":" = "}},{"ruleId":"semi-spacing","severity":2,"message":"Unexpected whitespace before semicolon.","line":11,"column":18,"nodeType":"ForStatement","source":"    for (var i=0 ; i<ids.length ; ++i) {","fix":{"range":[287,288],"text":""}},{"ruleId":"space-infix-ops","severity":2,"message":"Infix operators must be spaced.","line":11,"column":21,"nodeType":"BinaryExpression","source":"    for (var i=0 ; i<ids.length ; ++i) {","fix":{"range":[291,292],"text":" < "}},{"ruleId":"semi-spacing","severity":2,"message":"Unexpected whitespace before semicolon.","line":11,"column":33,"nodeType":"ForStatement","source":"    for (var i=0 ; i<ids.length ; ++i) {","fix":{"range":[302,303],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":12,"column":53,"nodeType":"ExpressionStatement","source":"      ids[i] = ids[i].split('-').reverse().join('-');","fix":{"range":[364,365],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":14,"column":21,"nodeType":"ExpressionStatement","source":"    ids = ids.sort();","fix":{"range":[392,393],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":15,"column":41,"nodeType":"VariableDeclaration","source":"    var sorted = ([].concat(ids)).sort();","fix":{"range":[434,435],"text":""}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":17,"column":30,"nodeType":"BinaryExpression","source":"    assert(sorted.toString() == ids.toString(), name + ' have expected order');"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":17,"column":79,"nodeType":"ExpressionStatement","source":"    assert(sorted.toString() == ids.toString(), name + ' have expected order');","fix":{"range":[515,516],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":18,"column":5,"nodeType":"ExpressionStatement","source":"  });","fix":{"range":[521,522],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":28,"column":3,"nodeType":"ExpressionStatement","source":"]);","fix":{"range":[689,690],"text":""}},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '-' and '*'.","line":32,"column":24,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME - 10*3600*1000}),"},{"ruleId":"space-infix-ops","severity":2,"message":"Infix operators must be spaced.","line":32,"column":28,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME - 10*3600*1000}),","fix":{"range":[812,813],"text":" * "}},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '-' and '*'.","line":32,"column":33,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME - 10*3600*1000}),"},{"ruleId":"space-infix-ops","severity":2,"message":"Infix operators must be spaced.","line":32,"column":33,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME - 10*3600*1000}),","fix":{"range":[817,818],"text":" * "}},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '+' and '*'.","line":36,"column":24,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME + 28*24*3600*1000})"},{"ruleId":"space-infix-ops","severity":2,"message":"Infix operators must be spaced.","line":36,"column":28,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME + 28*24*3600*1000})","fix":{"range":[939,940],"text":" * "}},{"ruleId":"space-infix-ops","severity":2,"message":"Infix operators must be spaced.","line":36,"column":31,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME + 28*24*3600*1000})","fix":{"range":[942,943],"text":" * "}},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '+' and '*'.","line":36,"column":36,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME + 28*24*3600*1000})"},{"ruleId":"space-infix-ops","severity":2,"message":"Infix operators must be spaced.","line":36,"column":36,"nodeType":"BinaryExpression","source":"  uuid.v1({msecs: TIME + 28*24*3600*1000})","fix":{"range":[947,948],"text":" * "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":37,"column":3,"nodeType":"ExpressionStatement","source":"]);","fix":{"range":[957,958],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":39,"column":1,"nodeType":"Identifier","source":"test('msec', function() {"},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":39,"column":22,"nodeType":"FunctionExpression","source":"test('msec', function() {","fix":{"range":[981,981],"text":" "}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '!==' and instead saw '!='.","line":41,"column":28,"nodeType":"BinaryExpression","source":"    uuid.v1({msecs: TIME}) != uuid.v1({msecs: TIME}),"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":43,"column":4,"nodeType":"ExpressionStatement","source":"  );","fix":{"range":[1098,1099],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":44,"column":3,"nodeType":"ExpressionStatement","source":"});","fix":{"range":[1102,1103],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":46,"column":1,"nodeType":"Identifier","source":"test('exception thrown when > 10k ids created in 1ms', function() {"},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":46,"column":64,"nodeType":"FunctionExpression","source":"test('exception thrown when > 10k ids created in 1ms', function() {","fix":{"range":[1168,1168],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":48,"column":21,"nodeType":"VariableDeclaration","source":"  var thrown = false;","fix":{"range":[1235,1236],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":50,"column":41,"nodeType":"ExpressionStatement","source":"    uuid.v1({msecs: TIME, nsecs: 10000});","fix":{"range":[1285,1286],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":52,"column":18,"nodeType":"ExpressionStatement","source":"    thrown = true;","fix":{"range":[1320,1321],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":54,"column":68,"nodeType":"ExpressionStatement","source":"  assert(thrown, 'Exception thrown when > 10K ids created in 1 ms');","fix":{"range":[1393,1394],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":55,"column":3,"nodeType":"ExpressionStatement","source":"});","fix":{"range":[1397,1398],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":57,"column":1,"nodeType":"Identifier","source":"test('clock regression by msec', function() {"},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":57,"column":42,"nodeType":"FunctionExpression","source":"test('clock regression by msec', function() {","fix":{"range":[1441,1441],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":59,"column":36,"nodeType":"VariableDeclaration","source":"  var uidt = uuid.v1({msecs: TIME});","fix":{"range":[1525,1526],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":60,"column":41,"nodeType":"VariableDeclaration","source":"  var uidtb = uuid.v1({msecs: TIME - 1});","fix":{"range":[1567,1568],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":64,"column":4,"nodeType":"ExpressionStatement","source":"  );","fix":{"range":[1717,1718],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":65,"column":3,"nodeType":"ExpressionStatement","source":"});","fix":{"range":[1721,1722],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":67,"column":1,"nodeType":"Identifier","source":"test('clock regression by nsec', function() {"},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":67,"column":42,"nodeType":"FunctionExpression","source":"test('clock regression by nsec', function() {","fix":{"range":[1765,1765],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":69,"column":48,"nodeType":"VariableDeclaration","source":"  var uidtn = uuid.v1({msecs: TIME, nsecs: 10});","fix":{"range":[1861,1862],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":70,"column":48,"nodeType":"VariableDeclaration","source":"  var uidtnb = uuid.v1({msecs: TIME, nsecs: 9});","fix":{"range":[1910,1911],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":74,"column":4,"nodeType":"ExpressionStatement","source":"  );","fix":{"range":[2062,2063],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":75,"column":3,"nodeType":"ExpressionStatement","source":"});","fix":{"range":[2066,2067],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":77,"column":1,"nodeType":"Identifier","source":"test('explicit options product expected id', function() {"},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":77,"column":54,"nodeType":"FunctionExpression","source":"test('explicit options product expected id', function() {","fix":{"range":[2122,2122],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":84,"column":5,"nodeType":"VariableDeclaration","source":"  });","fix":{"range":[2315,2316],"text":""}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":85,"column":13,"nodeType":"BinaryExpression","source":"  assert(id == 'd9428888-122b-11e1-b85c-61cd3cbb3210', 'Explicit options produce expected id');"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":85,"column":95,"nodeType":"ExpressionStatement","source":"  assert(id == 'd9428888-122b-11e1-b85c-61cd3cbb3210', 'Explicit options produce expected id');","fix":{"range":[2411,2412],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":86,"column":3,"nodeType":"ExpressionStatement","source":"});","fix":{"range":[2415,2416],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":88,"column":1,"nodeType":"Identifier","source":"test('ids spanning 1ms boundary are 100ns apart', function() {"},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":88,"column":59,"nodeType":"FunctionExpression","source":"test('ids spanning 1ms boundary are 100ns apart', function() {","fix":{"range":[2476,2476],"text":" "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":90,"column":47,"nodeType":"VariableDeclaration","source":"  var u0 = uuid.v1({msecs: TIME, nsecs: 9999});","fix":{"range":[2597,2598],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":91,"column":48,"nodeType":"VariableDeclaration","source":"  var u1 = uuid.v1({msecs: TIME + 1, nsecs: 0});","fix":{"range":[2646,2647],"text":""}},{"ruleId":"one-var","severity":2,"message":"Split initialized 'var' declarations into multiple statements.","line":93,"column":3,"nodeType":"VariableDeclaration","source":"  var before = u0.split('-')[0], after = u1.split('-')[0];"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":93,"column":58,"nodeType":"VariableDeclaration","source":"  var before = u0.split('-')[0], after = u1.split('-')[0];","fix":{"range":[2706,2707],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":94,"column":54,"nodeType":"VariableDeclaration","source":"  var dt = parseInt(after, 16) - parseInt(before, 16);","fix":{"range":[2761,2762],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":95,"column":64,"nodeType":"ExpressionStatement","source":"  assert(dt === 1, 'Ids spanning 1ms boundary are 100ns apart');","fix":{"range":[2826,2827],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":96,"column":3,"nodeType":"ExpressionStatement","source":"});","fix":{"range":[2830,2831],"text":""}}],"errorCount":66,"warningCount":0,"source":"var assert = require('assert');\n\nvar uuid = require('../');\n\n// Verify ordering of v1 ids created with explicit times\nvar TIME = 1321644961388; // 2011-11-18 11:36:01.388-08:00\n\nfunction compare(name, ids) {\n  test(name, function() {\n    // avoid .map for older browsers\n    for (var i=0 ; i<ids.length ; ++i) {\n      ids[i] = ids[i].split('-').reverse().join('-');\n    }\n    ids = ids.sort();\n    var sorted = ([].concat(ids)).sort();\n\n    assert(sorted.toString() == ids.toString(), name + ' have expected order');\n  });\n}\n\n// Verify ordering of v1 ids created using default behavior\ncompare('uuids with current time', [\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1()\n]);\n\n// Verify ordering of v1 ids created with explicit times\ncompare('uuids with time option', [\n  uuid.v1({msecs: TIME - 10*3600*1000}),\n  uuid.v1({msecs: TIME - 1}),\n  uuid.v1({msecs: TIME}),\n  uuid.v1({msecs: TIME + 1}),\n  uuid.v1({msecs: TIME + 28*24*3600*1000})\n]);\n\ntest('msec', function() {\n  assert(\n    uuid.v1({msecs: TIME}) != uuid.v1({msecs: TIME}),\n    'IDs created at same msec are different'\n  );\n});\n\ntest('exception thrown when > 10k ids created in 1ms', function() {\n  // Verify throw if too many ids created\n  var thrown = false;\n  try {\n    uuid.v1({msecs: TIME, nsecs: 10000});\n  } catch (e) {\n    thrown = true;\n  }\n  assert(thrown, 'Exception thrown when > 10K ids created in 1 ms');\n});\n\ntest('clock regression by msec', function() {\n  // Verify clock regression bumps clockseq\n  var uidt = uuid.v1({msecs: TIME});\n  var uidtb = uuid.v1({msecs: TIME - 1});\n  assert(\n    parseInt(uidtb.split('-')[3], 16) - parseInt(uidt.split('-')[3], 16) === 1,\n    'Clock regression by msec increments the clockseq'\n  );\n});\n\ntest('clock regression by nsec', function() {\n  // Verify clock regression bumps clockseq\n  var uidtn = uuid.v1({msecs: TIME, nsecs: 10});\n  var uidtnb = uuid.v1({msecs: TIME, nsecs: 9});\n  assert(\n    parseInt(uidtnb.split('-')[3], 16) - parseInt(uidtn.split('-')[3], 16) === 1,\n    'Clock regression by nsec increments the clockseq'\n  );\n});\n\ntest('explicit options product expected id', function() {\n  // Verify explicit options produce expected id\n  var id = uuid.v1({\n    msecs: 1321651533573,\n    nsecs: 5432,\n    clockseq: 0x385c,\n    node: [ 0x61, 0xcd, 0x3c, 0xbb, 0x32, 0x10 ]\n  });\n  assert(id == 'd9428888-122b-11e1-b85c-61cd3cbb3210', 'Explicit options produce expected id');\n});\n\ntest('ids spanning 1ms boundary are 100ns apart', function() {\n  // Verify adjacent ids across a msec boundary are 1 time unit apart\n  var u0 = uuid.v1({msecs: TIME, nsecs: 9999});\n  var u1 = uuid.v1({msecs: TIME + 1, nsecs: 0});\n\n  var before = u0.split('-')[0], after = u1.split('-')[0];\n  var dt = parseInt(after, 16) - parseInt(before, 16);\n  assert(dt === 1, 'Ids spanning 1ms boundary are 100ns apart');\n});\n"},{"filePath":"/tmp/CI-Pipeline.yml_406/v1.js","messages":[{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":4,"column":31,"nodeType":"VariableDeclaration","source":"var rng = require('./lib/rng');","fix":{"range":[255,256],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":5,"column":47,"nodeType":"VariableDeclaration","source":"var bytesToUuid = require('./lib/bytesToUuid');","fix":{"range":[303,304],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":13,"column":23,"nodeType":"VariableDeclaration","source":"var _seedBytes = rng();","fix":{"range":[517,518],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":19,"column":2,"nodeType":"VariableDeclaration","source":"];","fix":{"range":[713,714],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":22,"column":62,"nodeType":"VariableDeclaration","source":"var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;","fix":{"range":[819,820],"text":""}},{"ruleId":"one-var","severity":2,"message":"Split initialized 'var' declarations into multiple statements.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var _lastMSecs = 0, _lastNSecs = 0;"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":25,"column":35,"nodeType":"VariableDeclaration","source":"var _lastMSecs = 0, _lastNSecs = 0;","fix":{"range":[887,888],"text":""}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":28,"column":12,"nodeType":"FunctionDeclaration","source":"function v1(options, buf, offset) {","fix":{"range":[960,960],"text":" "}},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '&&' and '||'.","line":29,"column":15,"nodeType":"LogicalExpression","source":"  var i = buf && offset || 0;"},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '&&' and '||'.","line":29,"column":25,"nodeType":"LogicalExpression","source":"  var i = buf && offset || 0;"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":29,"column":29,"nodeType":"VariableDeclaration","source":"  var i = buf && offset || 0;","fix":{"range":[1013,1014],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":30,"column":20,"nodeType":"VariableDeclaration","source":"  var b = buf || [];","fix":{"range":[1034,1035],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":32,"column":26,"nodeType":"ExpressionStatement","source":"  options = options || {};","fix":{"range":[1062,1063],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":34,"column":79,"nodeType":"VariableDeclaration","source":"  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;","fix":{"range":[1143,1144],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":40,"column":81,"nodeType":"VariableDeclaration","source":"  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();","fix":{"range":[1526,1527],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":44,"column":75,"nodeType":"VariableDeclaration","source":"  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;","fix":{"range":[1723,1724],"text":""}},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '+' and '/'.","line":47,"column":33,"nodeType":"BinaryExpression","source":"  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;"},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '+' and '/'.","line":47,"column":55,"nodeType":"BinaryExpression","source":"  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;"},{"ruleId":"space-infix-ops","severity":2,"message":"Infix operators must be spaced.","line":47,"column":55,"nodeType":"BinaryExpression","source":"  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;","fix":{"range":[1826,1827],"text":" / "}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":47,"column":61,"nodeType":"VariableDeclaration","source":"  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;","fix":{"range":[1832,1833],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":51,"column":37,"nodeType":"ExpressionStatement","source":"    clockseq = clockseq + 1 & 0x3fff;","fix":{"range":[1973,1974],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":57,"column":14,"nodeType":"ExpressionStatement","source":"    nsecs = 0;","fix":{"range":[2160,2161],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":62,"column":72,"nodeType":"ThrowStatement","source":"    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');","fix":{"range":[2323,2324],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":65,"column":21,"nodeType":"ExpressionStatement","source":"  _lastMSecs = msecs;","fix":{"range":[2350,2351],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":66,"column":21,"nodeType":"ExpressionStatement","source":"  _lastNSecs = nsecs;","fix":{"range":[2372,2373],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":67,"column":23,"nodeType":"ExpressionStatement","source":"  _clockseq = clockseq;","fix":{"range":[2396,2397],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":70,"column":26,"nodeType":"ExpressionStatement","source":"  msecs += 12219292800000;","fix":{"range":[2484,2485],"text":""}},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '*' and '+'.","line":73,"column":33,"nodeType":"BinaryExpression","source":"  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;"},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '*' and '+'.","line":73,"column":41,"nodeType":"BinaryExpression","source":"  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":73,"column":63,"nodeType":"VariableDeclaration","source":"  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;","fix":{"range":[2565,2566],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":74,"column":28,"nodeType":"ExpressionStatement","source":"  b[i++] = tl >>> 24 & 0xff;","fix":{"range":[2594,2595],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":75,"column":28,"nodeType":"ExpressionStatement","source":"  b[i++] = tl >>> 16 & 0xff;","fix":{"range":[2623,2624],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":76,"column":27,"nodeType":"ExpressionStatement","source":"  b[i++] = tl >>> 8 & 0xff;","fix":{"range":[2651,2652],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":77,"column":21,"nodeType":"ExpressionStatement","source":"  b[i++] = tl & 0xff;","fix":{"range":[2673,2674],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":80,"column":54,"nodeType":"VariableDeclaration","source":"  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;","fix":{"range":[2745,2746],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":81,"column":28,"nodeType":"ExpressionStatement","source":"  b[i++] = tmh >>> 8 & 0xff;","fix":{"range":[2774,2775],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":82,"column":22,"nodeType":"ExpressionStatement","source":"  b[i++] = tmh & 0xff;","fix":{"range":[2797,2798],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":85,"column":35,"nodeType":"ExpressionStatement","source":"  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version","fix":{"range":[2863,2864],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":86,"column":29,"nodeType":"ExpressionStatement","source":"  b[i++] = tmh >>> 16 & 0xff;","fix":{"range":[2912,2913],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":89,"column":33,"nodeType":"ExpressionStatement","source":"  b[i++] = clockseq >>> 8 | 0x80;","fix":{"range":[3010,3011],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":92,"column":27,"nodeType":"ExpressionStatement","source":"  b[i++] = clockseq & 0xff;","fix":{"range":[3060,3061],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":95,"column":37,"nodeType":"VariableDeclaration","source":"  var node = options.node || _nodeId;","fix":{"range":[3111,3112],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":97,"column":23,"nodeType":"ExpressionStatement","source":"    b[i + n] = node[n];","fix":{"range":[3167,3168],"text":""}},{"ruleId":"no-unneeded-ternary","severity":2,"message":"Unnecessary use of conditional expression for default assignment.","line":100,"column":16,"nodeType":"ConditionalExpression","source":"  return buf ? buf : bytesToUuid(b);","fix":{"range":[3183,3209],"text":"buf || bytesToUuid(b)"}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":100,"column":36,"nodeType":"ReturnStatement","source":"  return buf ? buf : bytesToUuid(b);","fix":{"range":[3209,3210],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":103,"column":20,"nodeType":"ExpressionStatement","source":"module.exports = v1;","fix":{"range":[3233,3234],"text":""}}],"errorCount":46,"warningCount":0,"source":"// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n"},{"filePath":"/tmp/CI-Pipeline.yml_406/v4.js","messages":[{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":1,"column":31,"nodeType":"VariableDeclaration","source":"var rng = require('./lib/rng');","fix":{"range":[30,31],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":2,"column":47,"nodeType":"VariableDeclaration","source":"var bytesToUuid = require('./lib/bytesToUuid');","fix":{"range":[78,79],"text":""}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":4,"column":12,"nodeType":"FunctionDeclaration","source":"function v4(options, buf, offset) {","fix":{"range":[92,92],"text":" "}},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '&&' and '||'.","line":5,"column":15,"nodeType":"LogicalExpression","source":"  var i = buf && offset || 0;"},{"ruleId":"no-mixed-operators","severity":2,"message":"Unexpected mix of '&&' and '||'.","line":5,"column":25,"nodeType":"LogicalExpression","source":"  var i = buf && offset || 0;"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":5,"column":29,"nodeType":"VariableDeclaration","source":"  var i = buf && offset || 0;","fix":{"range":[145,146],"text":""}},{"ruleId":"space-unary-ops","severity":2,"message":"Unary word operator 'typeof' must be followed by whitespace.","line":7,"column":7,"nodeType":"UnaryExpression","source":"  if (typeof(options) == 'string') {","fix":{"range":[160,160],"text":" "}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":7,"column":23,"nodeType":"BinaryExpression","source":"  if (typeof(options) == 'string') {","fix":{"range":[170,172],"text":"==="}},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":8,"column":19,"nodeType":"BinaryExpression","source":"    buf = options == 'binary' ? new Array(16) : null;"},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":8,"column":53,"nodeType":"ExpressionStatement","source":"    buf = options == 'binary' ? new Array(16) : null;","fix":{"range":[237,238],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":9,"column":19,"nodeType":"ExpressionStatement","source":"    options = null;","fix":{"range":[257,258],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":11,"column":26,"nodeType":"ExpressionStatement","source":"  options = options || {};","fix":{"range":[288,289],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":13,"column":54,"nodeType":"VariableDeclaration","source":"  var rnds = options.random || (options.rng || rng)();","fix":{"range":[344,345],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":16,"column":36,"nodeType":"ExpressionStatement","source":"  rnds[6] = (rnds[6] & 0x0f) | 0x40;","fix":{"range":[449,450],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":17,"column":36,"nodeType":"ExpressionStatement","source":"  rnds[8] = (rnds[8] & 0x3f) | 0x80;","fix":{"range":[486,487],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":22,"column":29,"nodeType":"ExpressionStatement","source":"      buf[i + ii] = rnds[ii];","fix":{"range":[607,608],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":26,"column":34,"nodeType":"ReturnStatement","source":"  return buf || bytesToUuid(rnds);","fix":{"range":[653,654],"text":""}},{"ruleId":"semi","severity":2,"message":"Extra semicolon.","line":29,"column":20,"nodeType":"ExpressionStatement","source":"module.exports = v4;","fix":{"range":[677,678],"text":""}}],"errorCount":18,"warningCount":0,"source":"var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n"}],"stderr":"","exitCode":1,"initialized":"17:58:1","scheduled":"2017-02-28T18:21:17.875Z","completed":"2017-02-28T18:21:18.823Z"},{"jobId":"CI-Pipeline.yml_406","stageName":"whitebox","status":"Complete","stdout":{"stats":{"suites":0,"tests":8,"passes":8,"pending":0,"failures":0,"start":"2017-02-28T18:21:26.010Z","end":"2017-02-28T18:21:26.016Z","duration":6},"tests":[{"title":"uuids with current time","fullTitle":" uuids with current time","duration":1,"currentRetry":0,"err":{}},{"title":"uuids with time option","fullTitle":" uuids with time option","duration":0,"currentRetry":0,"err":{}},{"title":"msec","fullTitle":" msec","duration":0,"currentRetry":0,"err":{}},{"title":"exception thrown when > 10k ids created in 1ms","fullTitle":" exception thrown when > 10k ids created in 1ms","duration":0,"currentRetry":0,"err":{}},{"title":"clock regression by msec","fullTitle":" clock regression by msec","duration":0,"currentRetry":0,"err":{}},{"title":"clock regression by nsec","fullTitle":" clock regression by nsec","duration":0,"currentRetry":0,"err":{}},{"title":"explicit options product expected id","fullTitle":" explicit options product expected id","duration":0,"currentRetry":0,"err":{}},{"title":"ids spanning 1ms boundary are 100ns apart","fullTitle":" ids spanning 1ms boundary are 100ns apart","duration":0,"currentRetry":0,"err":{}}],"pending":[],"failures":[],"passes":[{"title":"uuids with current time","fullTitle":" uuids with current time","duration":1,"currentRetry":0,"err":{}},{"title":"uuids with time option","fullTitle":" uuids with time option","duration":0,"currentRetry":0,"err":{}},{"title":"msec","fullTitle":" msec","duration":0,"currentRetry":0,"err":{}},{"title":"exception thrown when > 10k ids created in 1ms","fullTitle":" exception thrown when > 10k ids created in 1ms","duration":0,"currentRetry":0,"err":{}},{"title":"clock regression by msec","fullTitle":" clock regression by msec","duration":0,"currentRetry":0,"err":{}},{"title":"clock regression by nsec","fullTitle":" clock regression by nsec","duration":0,"currentRetry":0,"err":{}},{"title":"explicit options product expected id","fullTitle":" explicit options product expected id","duration":0,"currentRetry":0,"err":{}},{"title":"ids spanning 1ms boundary are 100ns apart","fullTitle":" ids spanning 1ms boundary are 100ns apart","duration":0,"currentRetry":0,"err":{}}]},"stderr":"","exitCode":0,"initialized":"17:58:1","scheduled":"2017-02-28T18:21:23.143Z","completed":"2017-02-28T18:21:26.024Z"},null,{"jobId":"CI-Pipeline.yml_406","stageName":"htmlhint","status":"Complete","stdout":[],"stderr":"","exitCode":0,"initialized":"17:58:1","scheduled":"2017-02-28T18:21:17.880Z","completed":"2017-02-28T18:21:18.978Z"},{"jobId":"CI-Pipeline.yml_406","stageName":"code-coverage","status":"Complete","stdout":"\n=============================== Coverage summary ===============================\nStatements   : 36% ( 27/75 )\nBranches     : 0% ( 0/47 )\nFunctions    : 25% ( 1/4 )\nLines        : 36% ( 27/75 )\n================================================================================\n","stderr":"Writing coverage reports at [/tmp/CI-Pipeline.yml_406/coverage]\n=============================================================================\n","exitCode":0,"initialized":"17:58:1","scheduled":"2017-02-28T18:21:23.144Z","completed":"2017-02-28T18:21:26.486Z"},{"jobId":"CI-Pipeline.yml_406","stageName":"build","status":"Complete","stdout":"uuid@3.0.0 /tmp/CI-Pipeline.yml_406\n`-- mocha@3.1.2 \n  +-- browser-stdout@1.3.0 \n  +-- commander@2.9.0 \n  | `-- graceful-readlink@1.0.1 \n  +-- debug@2.2.0 \n  | `-- ms@0.7.1 \n  +-- diff@1.4.0 \n  +-- escape-string-regexp@1.0.5 \n  +-- glob@7.0.5 \n  | +-- fs.realpath@1.0.0 \n  | +-- inflight@1.0.6 \n  | | `-- wrappy@1.0.2 \n  | +-- inherits@2.0.3 \n  | +-- minimatch@3.0.3 \n  | | `-- brace-expansion@1.1.6 \n  | |   +-- balanced-match@0.4.2 \n  | |   `-- concat-map@0.0.1 \n  | +-- once@1.4.0 \n  | `-- path-is-absolute@1.0.1 \n  +-- growl@1.9.2 \n  +-- json3@3.3.2 \n  +-- lodash.create@3.1.1 \n  | +-- lodash._baseassign@3.2.0 \n  | | +-- lodash._basecopy@3.0.1 \n  | | `-- lodash.keys@3.1.2 \n  | |   +-- lodash._getnative@3.9.1 \n  | |   +-- lodash.isarguments@3.1.0 \n  | |   `-- lodash.isarray@3.0.4 \n  | +-- lodash._basecreate@3.0.3 \n  | `-- lodash._isiterateecall@3.0.9 \n  +-- mkdirp@0.5.1 \n  | `-- minimist@0.0.8 \n  `-- supports-color@3.1.2 \n    `-- has-flag@1.0.0 \n\n","stderr":" WARN lifecycle npm is using /usr/bin/nodejs but there is no node binary in the current PATH. Use the `--scripts-prepend-node-path` option to include the path for the node binary npm was executed with.\n","exitCode":0,"initialized":"17:58:1","scheduled":"2017-02-28T18:21:17.889Z","completed":"2017-02-28T18:21:23.138Z"}]